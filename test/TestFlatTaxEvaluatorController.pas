unit TestFlatTaxEvaluatorController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, InterfaceSalaryEvaluatorController, SalaryEntities,
  FlatTaxEvaluatorController;

type
  // Test methods for class TFlatTaxEvaluatorController

  TestTFlatTaxEvaluatorController = class(TTestCase)
  strict private
    FFlatTaxEvaluatorController: TFlatTaxEvaluatorController;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestEvaluate1;
    procedure TestEvaluate2;
    procedure TestEvaluateWhenEverythingIs0;
    procedure TestEvaluateWhenBruttoIs0ButHaveHourelySalaryAndVat;
    procedure TestEvaluateWhenBruttoIs0ButHaveHourelySalaryAndVatAndWorkingDaysNotEqualMonthDays;
    procedure TestVatIf0;
  end;

implementation

procedure TestTFlatTaxEvaluatorController.SetUp;
begin
  FFlatTaxEvaluatorController := TFlatTaxEvaluatorController.Create;
end;

procedure TestTFlatTaxEvaluatorController.TearDown;
begin
  FFlatTaxEvaluatorController.Free;
  FFlatTaxEvaluatorController := nil;
end;

procedure TestTFlatTaxEvaluatorController.TestEvaluate1;
var
  ReturnValue: Boolean;
  p_Salary: TSalary;
  p_Res: Single;
begin
  p_Salary := TSalary.Create;
  p_Salary.Brutto           := 12300.00;
  p_Salary.Vat              := 1000.00;
  p_Salary.Podatek          := 1000.00;
  p_Salary.ZUS              := 1000.00;
  p_Salary.SkladkaZdrowotna := 1000.00;

  p_Salary.DniRoboczych       := 20;
  p_Salary.DniPrzepracowanych := 15;

  ReturnValue := FFlatTaxEvaluatorController.Evaluate(p_Salary);

  p_Res := 9314.44;

  CheckEquals(p_Res, p_Salary.DoRozdysponowania);
end;

procedure TestTFlatTaxEvaluatorController.TestEvaluate2;
var
  ReturnValue: Boolean;
  p_Salary: TSalary;
  p_Res: Single;
begin
  p_Salary := TSalary.Create;
  p_Salary.Brutto           := 29704.5;
  p_Salary.Vat              := 5498;
  p_Salary.Podatek          := 4412;
  p_Salary.ZUS              := 1373.43;
  p_Salary.SkladkaZdrowotna := 0;

  p_Salary.DniRoboczych       := 21;
  p_Salary.DniPrzepracowanych := 21;

  ReturnValue := FFlatTaxEvaluatorController.Evaluate(p_Salary);

  p_Res := 15643.29;

  CheckEquals(p_Res, p_Salary.DoRozdysponowania);
end;

procedure TestTFlatTaxEvaluatorController.TestEvaluateWhenBruttoIs0ButHaveHourelySalaryAndVat;
var
  ReturnValue: Boolean;
  p_Salary: TSalary;
  p_Res: Single;
begin
  p_Salary := TSalary.Create;
  p_Salary.Stawka           := 143.75;
  p_Salary.Vat              := 5498;
  p_Salary.Podatek          := 4412;
  p_Salary.ZUS              := 1373.43;
  p_Salary.SkladkaZdrowotna := 0;

  p_Salary.DniRoboczych       := 21;
  p_Salary.DniPrzepracowanych := 21;

  ReturnValue := FFlatTaxEvaluatorController.Evaluate(p_Salary);

  p_Res := 15643.29;

  CheckEquals(p_Res, p_Salary.DoRozdysponowania);
end;

procedure TestTFlatTaxEvaluatorController.TestEvaluateWhenBruttoIs0ButHaveHourelySalaryAndVatAndWorkingDaysNotEqualMonthDays;
var
  ReturnValue: Boolean;
  p_Salary: TSalary;
  p_Res: Single;
begin
  p_Salary := TSalary.Create;
  p_Salary.Stawka           := 83.33;
  p_Salary.Vat              := 1000.00;
  p_Salary.Podatek          := 1000.00;
  p_Salary.ZUS              := 1000.00;
  p_Salary.SkladkaZdrowotna := 1000.00;

  p_Salary.DniRoboczych       := 20;
  p_Salary.DniPrzepracowanych := 15;

  ReturnValue := FFlatTaxEvaluatorController.Evaluate(p_Salary);

  p_Res := 9313.89;

  CheckEquals(p_Res, p_Salary.DoRozdysponowania);
end;

procedure TestTFlatTaxEvaluatorController.TestEvaluateWhenEverythingIs0;
var
  ReturnValue: Boolean;
  p_Salary: TSalary;
  p_Res: Single;
begin
  p_Salary := TSalary.Create;
  p_Salary.Brutto           := 0;
  p_Salary.Vat              := 0;
  p_Salary.Podatek          := 0;
  p_Salary.ZUS              := 0;
  p_Salary.SkladkaZdrowotna := 0;

  p_Salary.DniRoboczych       := 0;
  p_Salary.DniPrzepracowanych := 0;

  ReturnValue := FFlatTaxEvaluatorController.Evaluate(p_Salary);

  p_Res := 0;

  CheckEquals(p_Res, p_Salary.DoRozdysponowania);
end;

procedure TestTFlatTaxEvaluatorController.TestVatIf0;
var
  ReturnValue: Boolean;
  p_Salary: TSalary;
  p_Res: Single;
begin
  p_Salary := TSalary.Create;
  p_Salary.Stawka := 125;
  p_Salary.DniPrzepracowanych := 1;

  ReturnValue := FFlatTaxEvaluatorController.Evaluate(p_Salary);

  p_Res := 230;
  CheckEquals(p_Res, p_Salary.Vat);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFlatTaxEvaluatorController.Suite);
end.

